HOMEWORK 1   作业1

任务描述 本题目要求读入1个10进制正整数，然后分别以8进制和16进制形式输出。输出时不加前缀，其中以16进制形式输出数据时所有字母数字小写。

输入格式: 输入只有一行，1个10进制正整数。

输出格式: 在一行中输出两个值，中间以1个空格分隔。

输入样例: 127 输出样例: 177 7f

#include using namespace std; int main() { int a; scanf("%d",&a); printf("%o %x",a,a); return 0; }#使用命名空间std进行包含；Int main() {Int a；scanf(“% d”等);printf (" % % x”,a, a);返回0;}

从键盘分别输入一个char型、int型和double型变量的值。在每一行先输出变量的值，再输出该变量所占内存的字节数。

输入格式: 在一行内分别输入一个字符、整数和实数，数据间以空格分隔。

输出格式: 第一行：输出字符变量的值和该变量所占内存的字节数，中间以逗号分隔。 第二行：输出整型变量的值和该变量所占内存的字节数，中间以逗号分隔。 第三行：输出实型变量的值和该变量所占内存的字节数，中间以逗号分隔。 参考下面输出样例。

输入样例: B 13 56.8 输出样例: B,1 13,4 56.800000,8

#include using namespace std; int main() { char a; int b; double c; scanf("%c%d%lf",&a,&b,&c); printf("%c,%zu\n""%d,%zu\n""%06f,%zu",a,sizeof(a),b,sizeof(b),c,sizeof(c)); return 0; }#使用命名空间std进行包含；Int main(){字符a；int b;双c;scanf(“% c % d %低频”等,福利,等等);printf (" % c %祖茂堂\ n”“% d %祖茂堂\ n”“% 06 f %族”,a, sizeof (a), b, sizeof (b), c, sizeof (c));返回0;}

HOMEWORK 2   作业2

计算两个整数A和B的乘积（-50000 ≤ A, B ≤ 50000）。

输入格式: 输入为一行，包括两个整数A和B。A与B以空格分隔。

输出格式: 输出A和B的乘积

输入样例: 2 6 输出样例: 12

#include<stdio.h> int main() { long long A; long long B; scanf("%lld %lld",&A,&B); printf("%lld",A*B); return 0; }#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);printf (" % lld”,A * B);返回0;}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);printf (" % lld”,A * B);返回0;}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * B);；}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);printf (" % lld”,A * B);返回0;}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * B);；}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * B);；}#include int main() {long long A；long long B；A * B);;}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);printf (" % lld”,A * B);返回0;}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * B);；}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * B);；}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){长长的,长长的B; scanf(“% lld % lld”等,福利);A * B);；}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){很久了;long long B；}#include int main() {long long A;long long long B；}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);printf (" % lld”,A * B);返回0;}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * B);；}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * B);；}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){长长的,长长的B; scanf(“% lld % lld”等,福利);A * B);；}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){很久了;long long B；}#include int main() {long long A;long long long B；}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * B);；}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){很久了;long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){长长的,长长的B; scanf(“% lld % lld”等,福利);A * b)；} # include int主要（）{长长的，长长的B；Scanf （“ % LLD % LLD ”等，福利）；}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * b)；} # include int主要（）{很久了；}#include int main() {long long A；long long long；#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);printf (" % lld”,A * B);返回0;}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * B);；}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * B);；}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){长长的,长长的B; scanf(“% lld % lld”等,福利);A * B);；}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){很久了;long long B；}#include int main() {long long A;long long long B；}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * B);；}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){很久了;long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){长长的,长长的B; scanf(“% lld % lld”等,福利);A * b)；} # include int主要（）{长长的，长长的B；Scanf （“ % LLD % LLD ”等，福利）；}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * b)；} # include int主要（）{很久了；}#include int main() {long long A；}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * B);；}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){很久了;long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){长长的,长长的B; scanf(“% lld % lld”等,福利);A * b)；} # include int主要（）{长长的，长长的B；Scanf （“ % LLD % LLD ”等，福利）；}#include int main() {long long A;long long B;scanf（“ % lld % lld ”等，福利）；A * b)；} # include int主要（）{很久了；}#include int main() {long long A；}#include int main() {long long A；long long B；scanf(“% lld % lld”等,福利);A * B);;} # include int主要(){长长的,长长的B; scanf(“% lld % lld”等,福利);A * b)；} # include int主要（）{很久了；scanf（“ % lld % lld ”等，福利）；A * b)；} # include int主要（）{长长的，长长的B；Scanf （“ % LLD % LLD ”等，福利）；A * b);} # include int主要(){长长的,长长的b; Scanf(“% LLD % LLD”等,福利);}# include int主要(){很久了;long long B；}#include int主要（）{很久了；}#include int main() {long long A;long long long；

7-24 利用边长求三角形面积 分数 3 作者 cjyoleon 单位 哈尔滨理工大学 公元前60年，古希腊工程师海伦在《度量论》中首次证明了一个利用三角形三边边长求得三角形面积的海伦公式（我国古代数学家秦九韶在《数书九章》（1247年）独立提出等价的三斜求积术）：

三角形面积= s(s−a)(s−b)(s−c)​

其中a、b、c分别为三角形三边的边长；

s= 2 1​(a+b+c)   S = 2 1 （a b c）s= 2 1 （a b c）s= 2 1 (a b c)s= 2 1 (a b c)s= 2 1 （a b c）

注：c语言中，可以用如下方式求x的平方根：

sqrt(x); 其中sqrt是用来计算平方根的函数。例如：

double x = 5.6; double r = sqrt(x); printf("%f\n", r); 以上代码执行后，x（double类型）的平方根被赋值给变量r。

或者：

double x = 5.6; printf("%f\n", sqrt(x)); 另外还需要注意的是，当我们要使用sqrt函数时，除了我们以前使用的stdio.h，还需要在代码的顶部添加另一个头文件：

#include <math.h> 输入格式: 一行，包含三角形3条边a、b、c（a+b>c,a+c>b,b+c>a）的边长，各数值中间用一个空格隔开。

输出格式: 输出三角形的面积，保留2位小数。

输入样例: 3 4 5 输出样例: circumference = 12.00, area = 6.00 #include<stdio.h> #include<math.h> int main() { double a,b,c;

scanf("%lf %lf %lf",&a,&b,&c);
double circumference=a+b+c;双周长=a b c；
double s=0.5*circumference;双s = 0.5 *周长;


double area=sqrt(s*(s-a)*(s-b)*(s-c));双区=√*(年代)* (sb) * (s-c));双区=√*(年代)* (sb) * (s-c));双区=√*（年代）* (sb) *(s-c))；
printf("circumference = %.2f, area = %.2f",circumference,area);Printf (“circumference = %. ”2f，面积= %.2f"，周长，面积)；


return 0;   返回0;
}

要知道，计算机只能存储二进制数值，也就是说，计算机其实并不存储字符，我们使用的字符类型变量，实际上也是一个个的数值。

一个字符对应的数值，叫做这个字符的ASCII码。例如，小写字母'a'的ASCII码为97，小写字母'b'的ASCII码为98，大写字母'A'的ASCII码为65，大写字母'C'的ASCII码为67，等等。

换句话说，'a'就是97，'b'就是98，'A'就是65，'B'就是66，......

当我们用C语言输出字符变量时，只是用格式控制符%c告诉计算机，要把一个数值按照其对应的字符的样子显示出来；反过来，你同样可以把字符类型的变量当作一个数值来处理，它们一样可以参与各种数学运算，也可以用数值类型的格式控制符输出为数值类型。

输入格式: 一个字符c。

输出格式: c对应的ASCII码。

输入样例: a 输出样例: 在这里给出相应的输出。例如：

97

#include<stdio.h> int main() { char a; scanf("%c",&a); printf("%d",a); return 0; }#include int main() {char a；scanf(“% c”等);printf (" % d”);返回0;}#include int main() {char a；scanf(“% c”等);printf (" % d”);返回0;}#include int main() {char a;scanf（“ % c ”等）；Printf (" % d ")；返回0；}#include int main() {char a；scanf(“% c”等);printf (" % d”);返回0;}#include int main() {char a;scanf（“ % c ”等）；Printf (" % d ")；返回0；}#include int main() {char a;scanf（“ % c ”等）；Printf (" % d ")；返回0；}#include int main() {char a；Printf (" % d ")；返回0；}#include int main() {char a；scanf(“% c”等);printf (" % d”);返回0;}#include int main() {char a;scanf（“ % c ”等）；Printf (" % d ")；返回0；}#include int main() {char a;scanf（“ % c ”等）；Printf (" % d ")；返回0；}#include int main() {char a；scanf(“% c”等),Printf (" % d”);返回0;}# include int主要(){char, scanf(“% c”等);Printf (" % d ")；返回0；}#include int main() {char a；scanf(“% c”等),Printf (" % d”);返回0;}# include int主要(){char;scanf(“% c”等),Printf (" % d”);返回0;}# include int主要(){char, Printf (" % d”);返回0;}#include int main() {char a；scanf(“% c”等);printf (" % d”);返回0;}#include int main() {char a;scanf（“ % c ”等）；Printf (" % d ")；返回0；}#include int main() {char a;scanf（“ % c ”等）；Printf (" % d ")；返回0；}#include int main() {char a；scanf(“% c”等),Printf (" % d”);返回0;}# include int主要(){char, scanf(“% c”等);Printf (" % d ")；返回0；}#include int main() {char a；scanf(“% c”等),Printf (" % d”);返回0;}# include int主要(){char;scanf(“% c”等),Printf (" % d”);返回0;}# include int主要(){char, Printf (" % d”);返回0;}# include int主要(){char, scanf(“% c”等);Printf (" % d ")；返回0；}#include int main() {char a；scanf(“% c”等),Printf (" % d”);返回0;}# include int主要(){char;scanf(“% c”等),Printf (" % d”);返回0;}# include int主要(){char, scanf(“% c”等),Printf (" % d”);返回0;}# include int主要（）{char, scanf（“ % c ”等）；Printf (" % d”);返回0;}# include int主要(){char, scanf(“% c”等),Printf (" % d”);返回0;}# include int主要（）{char；scanf（“ % c ”等），Printf (" % d ")；返回0；}# include int主要（）{char, Printf (" % d ")；返回0；}

小明想造一台简单的加密机。这台机器的功能是把小明输入的字符加密后输出。 加密规则如下（是的，小明才4岁，只学了abcde/ABCDE这几个大小写字母）： 小明输入a，则机器输出b； 小明输入b，则机器输出c； 小明输入c，则机器输出d； 小明输入d，则机器输出e； 小明输入A，则机器输出B； 小明输入B，则机器输出C； 小明输入C，则机器输出D； 小明输入D，则机器输出E；

输入格式: 一个ad、或AD范围内的字母

输出格式: 小明输入的字母的后继字母（如：a的后继是b，D的后继是E）。

输入样例: a

#include using namespace std; int main() { char a; scanf("%c",&a); char b=a+1; printf("%c",b); return 0; }#使用命名空间std进行包含；Int main(){字符a；scanf(“% c”等);Char b=a 1；printf (" % c、b);返回0;}

匆匆离开人群，你打开纸条，上面赫然写着五个数字：104, 101, 108, 108, 111。

输入格式: 无输入。

输出格式: 输出上面五个ASCII码对应的单词。

输入样例:

输出样例: hello

#include using namespace std; int main() { int a=104,b=101,c=108,d=108,e=111; printf("%c%c%c%c%c%c",a,b,c,d,e); }#使用命名空间std进行包含；Int main() {Int a=104,b=101,c=108,d=108,e=111；printf (" % % % c % c % c % c, a, b, c, d, e);}#使用命名空间std进行包含；Int main() {Int a=104,b=101,c=108,d=108,e=111；printf (" % % % c % c % c % c, a, b, c, d, e);} #使用命名空间性病进行包含,Int主要(){Int = 104, b = 101, c = 108, d = 108, e = 111; printf  (" % % % c % c % c % c, a, b, c, d, e);}#使用命名空间std进行包含；Int main() {Int a=104,b=101,c=108,d=108,e=111；printf (" % % % c % c % c % c, a, b, c, d, e);} #使用命名空间性病进行包含,Int主要(){Int = 104, b = 101, c = 108, d = 108, e = 111; printf  (" % % % c % c % c % c, a, b, c, d, e);} #使用命名空间性病进行包含,Int主要(){Int = 104, b = 101, c = 108, d = 108, e = 111; printf  (" % % % c % c % c % c, a, b, c, d, e);} #使用命名空间性病进行包含,Int主要(){Int = 104, b = 101, c = 108, d = 108, e = 111;Printf (" % % % c % c % c % c % c, a, b, c, d, e)；}#使用命名空间std进行包含；Int main() {Int a=104,b=101,c=108,d=108,e=111；printf (" % % % c % c % c % c, a, b, c, d, e);} #使用命名空间性病进行包含,Int主要(){Int = 104, b = 101, c = 108, d = 108, e = 111; printf  (" % % % c % c % c % c, a, b, c, d, e);} #使用命名空间性病进行包含,Int主要(){Int = 104, b = 101, c = 108, d = 108, e = 111; printf  (" % % % c % c % c % c, a, b, c, d, e);} #使用命名空间性病进行包含,Int主要(){Int = 104, b = 101, c = 108, d = 108, e = 111;printf   (" % % % c % c % c % c, a, b, c, d, e);} #使用命名空间性病进行包含,Int主要(){Int = 104, b = 101, c = 108, d = 108, e = 111; printf  (" % % % c % c % c % c, a, b, c, d, e);} #使用命名空间性病进行包含,Int主要(){Int = 104, b = 101, c = 108, d = 108, e = 111;Printf (" % % % c % c % c % c % c, a, b, c, d, e)；} #使用命名空间性病进行包含,Int主要(){Int = 104, b = 101, c = 108, d = 108, e = 111;Printf (" % % % c % c % c % c % c, a, b, c, d, e)；} #使用命名空间性病进行包含,Int主要(){Int = 104, b = 101, c = 108, d = 108, e = 111;Printf  (" % % % c % c % c % c % c, a, b, c, d, e);}


HOMEWORK 3   作业3

7-8 数字加密
分数 4
作者 cjyoleon
单位 哈尔滨理工大学
小明有一个小本子，用来记录他的各种密码。
他的各种密码都只包含数字。比如：243。另外，密码不是负数。
考虑到如果小本子丢失的话，密码就会被别人知道，所以小明写在小本子上的都是加密后的密码。
加密规则是：加密密码的每一位，等于原始密码的对应位加上8之后，取个位数字。
例如，若原始密码中的某一位是1，那么这一位加密后就是9（8+1=9）；若原始密码中的某一位是5，那么加密后，这一位就变成3（5+8=13，取个位3）。
现在给你一个加密后的数字，请你输出它原来的数字。

输入格式:
一个大于零的一位数a。

输出格式:
对a进行解密的结果。

输入样例:
9
输出样例:
1

#include<cstdio>
using namespace std;   使用命名空间std；
int main()
{
    int a;   int;int;int;int;int, int, int;int;int, int, int, int;Int, Int, Int；
    scanf("%d",&a);
    if(a==9)   如果(= = 9)
    {
    printf("%d",a-8);
    }
 
    else   其他
    {
        printf("%d",(a+2)%10);   printf (" % d”,(2)% 10);printf (" % d”,(2)% 10);Printf (" % d ",(2)% 10)；printf (" % d”,(2)% 10);Printf (" % d ",(2)% 10)；Printf (" % d ",(2)% 10)；Printf (" % d ",(2)% 10)；
    }
    return 0;   返回0;
}


7-9 苹果和虫子
分数 3
作者 cjyoleon
单位 哈尔滨理工大学
小明买了一箱 n 个苹果，很不幸的是买完时箱子里混进了一条虫子。

虫子每 x 小时能吃掉一个苹果，假设虫子在吃完一个苹果之前不会吃另一个，那么经过y 小时小明还有多少个完整的苹果？

输入格式:
输入仅一行，包括三个不超过10 
5
 的非负整数 n,x 和y，测试数据保证y≤n×x。

输出格式:
输出也仅一行，剩下的苹果个数。
注意：要求的是完整的苹果个数。

输入样例:
10 4 9
输出样例:
7

#include<cstdio>
using namespace std;   使用命名空间std；
int main()
{
    long long int n,x,y;   Long Long int n,x,y；Long Long int n,x,y；Long Long int n,x,y；Long Long int n,x,y；Long Long int n,x,y Long Long int n,x,y Long Long int n,x,y；
    scanf("%lld %lld %lld",&n,&x,&y);
    if(n==0)   如果(n = = 0)
    {
    printf("0");
    }
 
    else   其他
    {
        if(y%x==0){
        printf("%d",n-(y/x));   printf (" % d”,n - (y / x));printf (" % d”,n - (y / x));Printf (" % d ",n - (y / x))；printf (" % d”,n - (y / x));Printf (" % d ",n - (y / x))；Printf (" % d ",n - (y / x))；Printf (" % d ",n - (y / x))；
        }
        else{   其他{
            printf("%lld",n-(y/x)-1);printf (" % lld”,n - (y / x) 1);printf (" % lld”,n - (y / x) 1);Printf (" % lld ",n - (y / x) 1)；
        }
    }
    return 0;   返回0;
}



7-32 有一门课不及格的学生
分数 6
作者 cjyoleon
单位 哈尔滨理工大学
给出一名学生的语文和数学成绩，判断他是否恰好有一门课不及格(成绩小于60分)。若该生恰好有一门课不及格，输出1；否则输出0。

输入格式:
一行，包含两个在0到100之间的整数，分别是该生的语文成绩和数学成绩。

输出格式:
若该生恰好有一门课不及格，输出1；否则输出0。

输入样例1:
50 80
输出样例1:
1
输入样例2:
60 80
输出样例2:
0

#include<cstdio>
using namespace std;   使用命名空间std；
int main()
{
    int a,b;   int a、b;
    scanf("%d %d",&a,&b);
    if((a<60&&b>=60)||(a>=60&&b<60))
    {
        printf("1");
    }
    else   其他
    {
        printf("0");
    }
    return 0;   返回0;
}  
输入四个整数，要求按从小到大的顺序输出。

输入格式:
一行，包括4个整数，每个数之间用空格间隔。

输出格式:
一行，4个整数，用空格间隔，从小到大排序。

输入样例:
4 3 2 1


#include<iostream>
int main()
{
    int i,j,n=4;   int i, j n = 4;int i, j n = 4;Int i, j n = 4；
    int a[n];   int [n];int [n];int [n];
    for(i=0;i<=n-1;i++)   (我= 0;我)< = n - 1;for(i=0;i<=n-1;i  )   (我= 0;我)< = n - 1;
    scanf("%d",&a[i]);
    for(i=0;i<=n-1;i++)   (我= 0;我)< = n - 1;for(i=0;i<=n-1;i  )   (我= 0;我)< = n - 1;
    {
        for(j = 0; j <n - i-1; j++)For (j = 0; j for(j = 0; j < i-1
        {
            if(a[j]>a[j+1])   if(a[j]>a[j 1])if(a[j]>a[j 1])   if(a[j]>a[j 1])
        {
        int m=a[j];   int m = [j];int m = [j];m = [j]；
        aa[j]=a[j 1];   a[j]=a[j 1];[j]=a[j+1];   a[j]=a[j 1];
        a[j+1]=m;   a[j 1]=m;a[j 1]=m;   a[j 1]=m;
        }
     
        }
    }

    for(i=0;i<n-1;i++)   (我< n - 1;我)= 0;for(i=0;i
    {
        printf("%d ",a[i]);   printf (" % d”,[我]);printf (" % d”,[我]);Printf (" % d "，[我])；
    }
    printf("%d", a[n-1]);   printf (" % d”(n - 1));printf (" % d”(n - 1));Printf (" % d " (n - 1))；
    return 0;   返回0;
}





7-13 出租车计价
分数 5
作者 沈睿
单位 浙江大学
本题要求根据某城市普通出租车收费标准编写程序进行车费计算。具体标准如下：

起步里程为3公里，起步费10元；
超起步里程后10公里内，每公里2元；
超过10公里以上的部分加收50%的回空补贴费，即每公里3元；
营运过程中，因路阻及乘客要求临时停车的，按每5分钟2元计收（不足5分钟则不收费）。
输入格式:
输入在一行中给出输入行驶里程（单位为公里，精确到小数点后1位）与等待时间（整数，单位为分钟），其间以空格分隔。

输出格式:
在一行中输出乘客应支付的车费（单位为元），结果四舍五入，保留到元。

输入样例1:
2.6 2
输出样例1:
10
输入样例2:
5.1 4
输出样例2:
14
输入样例3:
12.5 9
输出样例3:
34
#include<cstdio>
#include<cmath>
int main()
{
    double s;//里程
    long int w;//等待
    int a=0;   int = 0;int = 0;Int = 0；

    scanf("%lf %ld",&s,&w);
    if(0<=w&&w<5)//定义等待情况
    {
        a=0;   = 0;= 0;= 0;
        
    }
    else{   其他{
        a=1;   = 1;= 1;= 1;
        
    }
    
    double p=0.0;   双p = 0.0;
    switch(a)   开关(a)
    {
        case 0://不收等待费
            if(s<=3){p=10.0;}   如果(s < = 3) {p = 10.0;}
            else   其他
            {
                if(3<s&&s<=10)   如果(3 < s&&s < = 10)
                {p=10.0+(s-3)*2.0;}   {p = 10.0 (s 3) * 2.0;}{p = 10.0 (s 3) * 2.0;} {p = 10.0 (s3) * 2.0；}
                else   其他
                {
                    p=24.0+(s-10)*3.0;   p = 24.0 (s-10) * 3.0;p = 24.0 (s-10) * 3.0;P = 24.0 (s-10) * 3.0；
                }
            }
            break;   打破;
            
        case 1://收等待费
            int wait_fee = (w/5) * 2;Int wait_fee = (w/5) * 2；Int wait_fee = (w/5) * 2；Int wait_fee = (w/5) * 2；Int wait_fee = (w/5) * 2；Int wait_fee = (w/5) * 2；
            if(s<=3){p=10.0+wait_fee;}如果(s < = 3) {p = 10.0 wait_fee;}如果(s < = 3) {p = 10.0 wait_fee;}如果（s < = 3） {p = 10.0；}
            else   其他
            {
                if(3<s&&s<=10)   如果(3 < s&&s < = 10)
                {p=10.0+(s-3)*2.0+wait_fee;}{p=10.0 (s-3)*2.0；}{p=10.0 (s-3)*2.0；{p = 10.0 (s 3) * 2.0 wait_fee;} {p = 10.0 (s 3) * 2.0;} {p = 10.0 (s 3) * 2.0;
                else   其他
                {
                    p=24.0+(s-10)*3.0+wait_fee;P =24.0 (s-10)*3.0 wait_fee；P =24.0 (s-10)*3.0 wait_fee；P =24.0 (s-10)*3.0 wait_fee；
                }
            }
            break;   打破;
    }
    double fp=p+0.5;//the finall fee双fp=p 0.5；//最终费用
    long int ffp=fp;   Long int ffp=fp；Long int ffp=fp；Long int ffp=fp；
    printf("%ld",ffp);
    return 0;   返回0;
}




程序功能
输入一个整数n

输入n个整数

计算这些数的总和和平均值

使用冒泡排序对数组进行升序排序

输出最大值、最小值和平均值

代码逐行解释


#include<iostream>
#include<cmath>

int main()
{
    int n;
    double sum=0.0;   双金额= 0.0;
    scanf("%d",&n);  // 输入数组长度n
    
    int a[n];  // 声明长度为n的数组（变长数组，C99/C++扩展特性）
    
    // 输入数组元素并计算总和
    for(int i=0;i<=n-1;i++)   For （i <=n-1;i）for（i <=n-1;i）
    {
        scanf("%d",&a[i]);  // 输入第i个元素
        sum=sum+a[i];       // 累加到总和
    }
    
    // 冒泡排序（升序）
    for(int i=0;i<=n-2;i++)         // 外层循环：需要n-1轮排序
    {
        for(int j=0;j<=n-2-i;j++)   // 内层循环：每轮比较相邻元素
        {
            if(a[j]>a[j+1])         // 如果前一个元素大于后一个
            {
                int p=a[j];         // 交换两个元素的位置
                a[j]=a[j+1];   a[j]=a[j 1];a[j]=a[j 1];   a[j]=a[j 1];
                a[j+1]=p;   a[j 1]=p;
            }
        }
    }
    
    // 输出结果
    printf("%d\n%d\n%.2f",a[n-1],a[0],sum/n);printf (" % d % d \ n \ n % .2f”,[n], [0], / n);
    // a[n-1]：排序后最后一个元素（最大值）
    // a[0]：排序后第一个元素（最小值）
    // sum/n：平均值，保留两位小数
    
    return 0;   返回0;
}
for(int j=0; j<=n-2-i; j++)For (int j=0; j<=n-2-i；
j=0：从数组的第一个元素开始

j<=n-2-i：循环的终止条件

j++：每次循环后j增加1

条件 j<=n-2-i 的含义
1. n-2 的原因：
数组索引从0到n-1

在比较 a[j] 和 a[j+1] 时，当 j = n-2 时：

a[j] 是倒数第二个元素

a[j+1] 是最后一个元素

如果 j = n-1，那么 a[j+1] 就会越界访问不存在的元素

2. -i 的原因（优化关键）：
i 是外层循环的计数器，表示已经完成的排序轮数

每完成一轮外层循环，最大的一个数就会"冒泡"到正确位置

因此内层循环不需要再比较已经排好序的部分

示例说明
假设 n = 5，数组为：[5, 3, 8, 1, 2]

第1轮 (i=0)：

j <= 5-2-0 = 3，所以 j 从 0 到 3

比较所有相邻元素

第2轮 (i=1)：

j <= 5-2-1 = 2，所以 j 从 0 到 2

最后一个元素已经是最大值，不需要再比较

第3轮 (i=2)：

j <= 5-2-2 = 1，所以 j 从 0 到 1

最后两个元素已经排好序

可视化过程
text   文本
初始: [5, 3, 8, 1, 2]

i=0: 比较 j=0到3 → [3, 5, 1, 2, 8]  (8冒泡到最后)
i=1: 比较 j=0到2 → [3, 1, 2, 5, 8]  (5冒泡到倒数第二)
i=2: 比较 j=0到1 → [1, 2, 3, 5, 8]  (3冒泡到中间)





输入一个正整数n（n ≤ 5000），输出(1, n)区间内，所有能整除n的数。
如果该区间内没有能整除n的数，则输出“none.”。

输入格式:
一个正整数n（n ≤ 5000）。

输出格式:
输出(1, n)区间内，所有能整除n的数。每个数之间用空格分隔。如果该区间内没有能整除n的数，则输出“none.”。
注意：最后一个数后面没有空格。

#include <stdio.h>

int main() {   Int main() {int main() {int main() {int main() {int main() {int main() {
    int n;
    scanf("%d", &n);   scanf(“% d”,n);
    int found = 0; // 标记是否找到符合条件的数
    for (int i = 2; i < n; i++)For （I = 2; I < n； I）
    {
        if (n % i == 0) （n % I == 0）
        {
            if (!found)    如果(!发现)
            {
                printf("%d", i);   printf (" % d”,我);
                found = 1;   发现= 1；
            } 
            else    其他
            {
                printf(" %d", i);   Printf (" %d", i)；
            }
        }
    }
    if (!found) {   如果(!发现){
        printf("none.");   printf(“。”);
    }
    printf("\n");
    return 0;   返回0;
}解释代码




`found`变量在这段代码中起到了**多重关键作用**：

## 1. **标记是否找到因子**
```c
int found = 0; // 标记是否找到符合条件的数
```
- 初始值设为0，表示**还没有找到**任何因子
- 当找到第一个因子时，设置为1，表示**已经找到**了因子

## 2. **控制输出格式**
```c   ' ' ' c
if (!found) {   如果(!发现){
    printf("%d", i);    // 第一个因子：不加空格
    found = 1;
} else {
    printf(" %d", i);   // 后续因子：前面加空格
}
```
- **第一个因子**：直接打印，不加空格
- **后续因子**：先打印空格，再打印数字

## 3. **判断是否输出"none."**
```c   ' ' ' c
if (!found) {   如果(!发现){
    printf("none.");   printf(“。”);printf(“。”);printf(" . ")；
}
```
- 程序结束后检查found的值
- 如果还是0，说明**一个因子都没找到**，输出"none."
- 如果是1，说明**找到了至少一个因子**，不输出"none."

## 实际运行示例

**输入**: `12`
- i=2时：found=0 → 输出"2"，found设为1
- i=3时：found=1 → 输出" 3"
- i=4时：found=1 → 输出" 4"  
- i=6时：found=1 → 输出" 6"
- **最终输出**: `2 3 4 6`

**输入**: `13`（质数）
- 循环中found始终为0
- 程序结束后：found=0 → 输出"none."
- **最终输出**: `none.`

## 总结
`found`变量是程序的核心控制逻辑，确保了：
- ✅ 正确的输出格式（因子间有空格分隔）
- ✅ 正确处理质数情况（输出"none."）
- ✅ 清晰的程序逻辑流程
i=3: 比较 j=0到0 → [1, 2, 3, 5, 8]  (2已经在正确位置)
这种优化减少了不必要的比较，提高了冒泡排序的效率。
